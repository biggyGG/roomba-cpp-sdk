/* Created and copyrighted by Zachary J. Fields. All rights reserved. */

#ifndef OI_SENSORS_H
#define OI_SENSORS_H

#include <cstdint>
#include <functional>

#include "../OIDefines.h"

namespace roomba {

/// \brief Data area utilized by sensor methods
/// \details Sensor data is returned as a byte array with checksum.
/// This reflects the data representation of the returned sensor data,
/// as it strikes the balance between usability, size and speed optimization.
/// see OICommand::sensors
/// see OICommand::queryList
/// see OICommand::stream
/// see OICommand::pauseResumeStream
namespace sensors {
	/// \brief Return codes
	enum ReturnCode : int_opt8_t {
		INVALID_CHECKSUM = -101,
		SERIAL_TRANSFER_FAILURE = -100,
		INVALID_PARAMETER = -10,
		NO_DATA_AVAILABLE = -4,
		FAILURE_TO_SYNC = -3,
		INVALID_MODE_FOR_REQUESTED_OPERATION = -2,
		SUCCESS = 0,
	};
	
	/// \brief Data structure to overlay sensor blob
	/// \details The data structure provides field name
	/// access to the sensor data returned by the Roomba.
	/// \note This data structure must be given the packed
	/// attribute, due the fact the data is not divisible 
	/// into even blocks of 8, 16, 32 or 64.
	/// \see OpenInterface::sensors
	/// \see OpenInterface::queryList
	/// \see OpenInterface::stream
	struct sensor_data_t {
		uint8_t bumps_and_wheel_drops;
		uint8_t wall;
		uint8_t cliff_left;
		uint8_t cliff_front_left;
		uint8_t cliff_front_right;
		uint8_t cliff_right;
		uint8_t virtual_wall;
		uint8_t motor_overcurrents;
		uint8_t dirt_detect;
		uint8_t reserved_1;
		uint8_t infrared_character_omni;
		uint8_t buttons;
		uint16_t distance;
		uint16_t angle;
		uint8_t charging_state;
		uint16_t voltage;
		uint16_t current;
		uint8_t temperature;
		uint16_t battery_charge;
		uint16_t battery_capacity;
		uint16_t wall_signal;
		uint16_t cliff_left_signal;
		uint16_t cliff_front_left_signal;
		uint16_t cliff_front_right_signal;
		uint16_t cliff_right_signal;
		uint8_t reserved_2;
		uint16_t reserved_3;
		uint8_t charging_sources_available;
		uint8_t oi_mode;
		uint8_t song_number;
		uint8_t song_playing;
		uint8_t number_of_stream_packets;
		uint16_t requested_velocity;
		uint16_t requested_radius;
		uint16_t requested_right_velocity;
		uint16_t requested_left_velocity;
		uint16_t right_encoder_counts;
		uint16_t left_encoder_counts;
		uint8_t light_bumper;
		uint16_t light_bump_left_signal;
		uint16_t light_bump_front_left_signal;
		uint16_t light_bump_center_left_signal;
		uint16_t light_bump_center_right_signal;
		uint16_t light_bump_front_right_signal;
		uint16_t light_bump_right_signal;
		uint8_t infrared_character_left;
		uint8_t infrared_character_right;
		uint16_t left_motor_current;
		uint16_t right_motor_current;
		uint16_t main_brush_motor_current;
		uint16_t side_brush_motor_current;
		uint8_t stasis;
	} __attribute__((__packed__));

	/// \brief Function to initialize sensor
	/// \details Enables the sensor functionality by setting
	/// the pointer to the serial read function; enabling
	/// serial communication.
	/// \param fnSerialRead_ A multi-byte read serial read function
	/// \return SUCCESS
	/// \see end
	ReturnCode
	begin (
		std::function<size_t(uint_opt8_t * const, const size_t)> fnSerialRead_
	);
	
	/// \brief Release resources tied to sensors
	/// \details Restores internal variables to a state ready for
	/// the next call to begin().
	/// \return SUCCESS
	/// \see begin
	ReturnCode
	end (
		void
	);
	
	/// \brief Accessor method to check for parsing errors
	/// \details The parsing methods typically execute in a separate thread
	/// and is therefore unable to provide return codes directly. This method
	/// provides access to the shared memory where the return code is stored.
	/// \return SUCCESS
	/// \return SERIAL_TRANSFER_FAILURE
	/// \see sensors::parseQueryData
	/// \see sensors::parseStreamData
	ReturnCode
	getParseError (
		void
	);
	
	/// \brief Function to receive serial data generated by a query command
	/// \details Parses data received from Roomba and stores it in memory
	/// accessible by the OICommand object.
	/// \return SUCCESS
	/// \return SERIAL_TRANSFER_FAILURE
	/// \see OICommand::sensors
	/// \see OICommand::queryList
	ReturnCode
	parseQueryData (
		void
	);
	
	/// \brief Function to receive serial data generated by the stream command
	/// \details Parses data received from Roomba and stores it in memory
	/// accessible by the OICommand object.
	/// \return SUCCESS
	/// \see OICommand::stream
	ReturnCode
	parseStreamData (
		void
	);
	
	/// \brief Stores the baud code
	/// \details The baud code is used when calculating the
	/// time required to execute a sensor query transaction.
	/// \return SUCCESS
	/// \return INVALID_PARAMETER
	/// \see OICommand::sensors
	/// \see OICommand::queryList
	ReturnCode
	setBaudCode (
		const BaudCode baud_code_
	);
	
	/// \brief Function to store parse key
	/// \details A parsing key is generated during the call
	/// to queryList() or sensors() to describe the format
	/// of the data returned by the iRobot® Roomba.
	/// \param [in] parse_key_ An array of bytes describing
	/// the data requested from the iRobot® Roomba.
	/// \n Index 0 contains the length of the array.
	/// \n The remaining values are the packet ids of the
	/// data requested from the iRobot® Roomba.
	/// \return SUCCESS
	/// \return INVALID_PARAMETER
	/// \see OICommand::sensors
	/// \see OICommand::queryList
	ReturnCode
	setParseKey (
		PacketId const * const parse_key_
	);
	
} // namespace sensor
} // namespace roomba

#endif

/* Created and copyrighted by Zachary J. Fields. All rights reserved. */
