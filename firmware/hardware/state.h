/* Created and copyrighted by Zachary J. Fields. Offered as open source under the MIT License (MIT). */

#ifndef STATE_H
#define STATE_H

#include <cstdint>

#include "../defines.h"

namespace roomba {

/// \brief The state of the iRobot Roomba
/// \details This namespace provides access to a state machine prescribed by the
/// iRobot Roomba Open Interface specification. The namespace stores tracking
/// information when calls are made to set device properties (i.e. baud code),
/// it also houses the data returned when the state of the sensors are queried.
/// see OpenInterface::baud
/// see OpenInterface::control
/// see OpenInterface::full
/// see OpenInterface::power
/// see OpenInterface::queryList
/// see OpenInterface::safe
/// see OpenInterface::sensors
/// see OpenInterface::start
/// see OpenInterface::stream
namespace state {

/// \brief Data structure to overlay sensor blob
/// \details The data structure provides field name
/// access to the sensor data returned by the Roomba.
/// \note This data structure must be given the packed
/// attribute, due the fact the data is not divisible 
/// into even blocks of 8, 16, 32 or 64.
/// \see OpenInterface::sensors
/// \see OpenInterface::queryList
/// \see OpenInterface::stream
struct sensor_data_t {
	uint8_t bumps_and_wheel_drops;
	uint8_t wall;
	uint8_t cliff_left;
	uint8_t cliff_front_left;
	uint8_t cliff_front_right;
	uint8_t cliff_right;
	uint8_t virtual_wall;
	uint8_t motor_overcurrents;
	uint8_t dirt_detect;
	uint8_t reserved_1;
	uint8_t infrared_character_omni;
	uint8_t buttons;
	uint16_t distance;
	uint16_t angle;
	uint8_t charging_state;
	uint16_t voltage;
	uint16_t current;
	uint8_t temperature;
	uint16_t battery_charge;
	uint16_t battery_capacity;
	uint16_t wall_signal;
	uint16_t cliff_left_signal;
	uint16_t cliff_front_left_signal;
	uint16_t cliff_front_right_signal;
	uint16_t cliff_right_signal;
	uint8_t reserved_2;
	uint16_t reserved_3;
	uint8_t charging_sources_available;
	uint8_t oi_mode;
	uint8_t song_number;
	uint8_t song_playing;
	uint8_t number_of_stream_packets;
	uint16_t requested_velocity;
	uint16_t requested_radius;
	uint16_t requested_right_velocity;
	uint16_t requested_left_velocity;
	uint16_t right_encoder_counts;
	uint16_t left_encoder_counts;
	uint8_t light_bumper;
	uint16_t light_bump_left_signal;
	uint16_t light_bump_front_left_signal;
	uint16_t light_bump_center_left_signal;
	uint16_t light_bump_center_right_signal;
	uint16_t light_bump_front_right_signal;
	uint16_t light_bump_right_signal;
	uint8_t infrared_character_left;
	uint8_t infrared_character_right;
	uint16_t left_motor_current;
	uint16_t right_motor_current;
	uint16_t main_brush_motor_current;
	uint16_t side_brush_motor_current;
	uint8_t stasis;
} __attribute__((__packed__));

/// \brief Accessor method to check for parsing errors
/// \details The parsing methods typically execute in a separate thread
/// and is therefore unable to provide return codes directly. This method
/// provides access to the shared memory where the return code is stored.
/// \return SUCCESS
/// \return SERIAL_TRANSFER_FAILURE
/// \see state::parseQueryData
/// \see state::parseStreamData
ReturnCode
getParseError (
	void
);

/// \brief Function to receive serial data generated by a query command
/// \details Parses data received from Roomba and stores it in memory
/// accessible by the OICommand object.
/// \return SUCCESS
/// \return SERIAL_TRANSFER_FAILURE
/// \see OpenInterface::sensors
/// \see OpenInterface::queryList
ReturnCode
parseQueryData (
	void
);

/// \brief Function to receive serial data generated by the stream command
/// \details Parses data received from Roomba and stores it in memory
/// accessible by the OICommand object.
/// \return SUCCESS
/// \see OpenInterface::stream
ReturnCode
parseStreamData (
	void
);

/// \brief Stores the baud code
/// \details The baud code is used when calculating the
/// time required to execute a sensor query transaction.
/// \return SUCCESS
/// \return INVALID_PARAMETER
/// \see OpenInterface::sensors
/// \see OpenInterface::queryList
ReturnCode
setBaudCode (
	const BaudCode baud_code_
);

/// \brief Function to store parse key
/// \details A parsing key is generated during the call
/// to queryList() or sensors() to describe the format
/// of the data returned by the iRobot® Roomba.
/// \param [in] parse_key_ An array of bytes describing
/// the data requested from the iRobot® Roomba.
/// \n Index 0 contains the length of the array.
/// \n The remaining values are the packet ids of the
/// data requested from the iRobot® Roomba.
/// \return SUCCESS
/// \return INVALID_PARAMETER
/// \see OpenInterface::sensors
/// \see OpenInterface::queryList
ReturnCode
setParseKey (
	sensor::PacketId const * const parse_key_
);

/// \brief Stores the operating mode of the Open Interface
/// \details The variable is used to track the current operating
/// mode of the Roomba's internal state machine (i.e. Off,
/// Passive, Safe, Full), and is used as a gate to control
/// available functionality.
/// \return SUCCESS
/// \return INVALID_PARAMETER
/// see OpenInterface::control
/// see OpenInterface::full
/// see OpenInterface::power
/// see OpenInterface::safe
/// see OpenInterface::start
ReturnCode
setOIMode (
	const OIMode oi_mode_
);

} // namespace state
} // namespace roomba

#endif

/* Created and copyrighted by Zachary J. Fields. Offered as open source under the MIT License (MIT). */
